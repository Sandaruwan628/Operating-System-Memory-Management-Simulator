import java.util.*;

public class Main {

    public static void main(String[] args) {   
        MemoryMangement ram1 = new MemoryMangement();
        ram1.runSimulator();       
    }
}

class MemoryMangement {

    Random rd = new Random();
    int pageNumber;
    int offSet;
    
    int pageTableSize = 10000;
    int memorySize = pageTableSize*1000;
    int[][] pageTable = new int[pageTableSize][2];
    int[][] tlb = new int [200][2]; 
    int[][] cache = new int [10][2];
    ArrayList<Integer> mainMemory = new ArrayList <Integer> (memorySize);
    

    public void runSimulator (){
        allocMemSize();
        generateLogicalAddress();
        loadCache();
        loadTLB();
        createPageTabel();
        int a = searchMainMemory(searchCache());
        System.out.println("Stored data: "+ a + "\n");
    }


/////////////////////////////////////////////////////////////////////////
    public int allocMemSize(){
        System.out.println("\nMemory size allocated as: " + memorySize +"\n");
		
		System.out.println("\nAllocating Memory spaces...");
        for (int i = 0; i< memorySize; i++){
            int memoryData = rd.nextInt(Integer.MAX_VALUE);
            mainMemory.add(memoryData);      
        }
        System.out.println("All memory spaces are allocated succesfully!\n");
        return 0;   
    }

    public int searchMainMemory(int address){ 
        
        System.out.println("Searching Main memory...");
        String mainMemoryIndex = "" + Integer.toString(address) + Integer.toString(offSet);

        System.out.println("Address conversion running..."); 
        int numIndex = Integer.parseInt(mainMemoryIndex);

        System.out.println("Retreiving data...\n"); 
        System.out.println("The main memory location: "+ numIndex );
        return mainMemory.get(numIndex);

    }

//////////////////////////////////////////////////////////////////////

   

    public int generateLogicalAddress(){
        
        System.out.println("\nGenerating Logical address...\n");
        int virtualAddress = rd.nextInt(pageTableSize);
        String address = Integer.toString(virtualAddress);
        int n = address.length();

        String vAdrs =""; //Seperating the virtual address
        String offSet = "" + address.charAt(n-1); //seperating the offset. here the offset is the last digit
        

        for (int i=0; i<(address.length()-1);i++){
            vAdrs = vAdrs + address.charAt(i);
        }
        int offSetNum = Integer.parseInt(offSet); //Offset part converted to integer from the string
        int pgNum = Integer.parseInt(vAdrs); //logical address part converted to integer from the string

        this.pageNumber = pgNum;
        this.offSet= offSetNum;

        System.out.println("Logical address generated by the CPU: " + address);
        System.out.println("Offset of the address: " + offSetNum + "\n");
           
        return 0;
    }

    
    public int createPageTabel(){

        System.out.println("\nCreating page table...\n");

        int memLocation=0;
		
            System.out.println("Loading memory locations to page table...");
            for (int i = 0; i < pageTable.length; ++i) {
                
                pageTable[i][0]= i;
                pageTable[i][1]= memLocation;
                memLocation+=100;   
            }
            System.out.println("Page Table Created! \n\n");
        
        
        return 0;
    }

    public void loadCache(){
        System.out.println("Loading Cache...");

        for (int i = 0; i < cache.length; ++i) {     
                cache[i][0]= rd.nextInt(pageTableSize);
                cache[i][1]= rd.nextInt(pageTableSize*100);          
        }
        
        System.out.println("Cache loaded!\n");
    }

    public void loadTLB(){
        System.out.println("Loading TLB...");

        for (int i = 0; i < tlb.length; ++i) {  
                tlb[i][0]= rd.nextInt(pageTableSize);
                tlb[i][1]= rd.nextInt(pageTableSize*100);          
        }
        
        System.out.println("TLB loaded!\n");
    }
    

// 1
    public int searchCache (){
        System.out.println("Searching the Physical Address...\n");
        System.out.println("Searching in Cache...");

        int physicalAddressIndex=0;
        int cacheIndex = -1;
        for (int i = 0; i < cache.length; i++) {
            if (cache[i][0] == pageNumber) {
                cacheIndex = i;
                break;
            }
        }

        if (cacheIndex != -1) {
            // Update the TLB entry with the new data
             physicalAddressIndex = cache[cacheIndex][1];
            System.out.println("Cache Hit!\n");
        } else {
            System.out.println("Cache miss!\n");
            physicalAddressIndex= searchTLB(pageNumber);
        }

        System.out.println("Table Index: "+ pageNumber);
        System.out.println("Physical Address found as: "+ physicalAddressIndex +"\n");

        return physicalAddressIndex;
    } 
    

    public int updateCache (int pageNumber, int physicalAddressIndex){ 
        for (int i = 0; i < cache.length; i++) {
            cache[i][1] = physicalAddressIndex;
            cache[i][0] = pageNumber;
        }
        System.out.println("Cache Updated!\n");
        return 0;
    }
    
// 
    public int searchTLB (int pageNumber){
        System.out.println("Searching in TLB...");
        
        int physicalAddressIndex=0;
        int tlbIndex = -1;
        for (int i = 0; i < tlb.length; i++) {
            if (tlb[i][0] == pageNumber) {
                tlbIndex = i;
                break;
            }
        }


        if (tlbIndex != -1) {
            // Update the TLB entry with the new data
             physicalAddressIndex = tlb[tlbIndex][1];
            System.out.println("TLB Hit!\n");
        } else {
            System.out.println("TLB miss!\n");
            physicalAddressIndex=searchPageTable(pageNumber);
        }
        return physicalAddressIndex;
    }

    public int updateTLB(int pageNumber, int physicalAddressIndex) {
        // Find the entry in the TLB for the given logical address
        
        for (int i = 0; i < tlb.length; i++) {
            tlb[i][1] = physicalAddressIndex;
            tlb[i][0] = pageNumber;
            }
        System.out.println("TLB Updated!\n");

        return 0;
    }

// 3
    public int searchPageTable(int pageNumber){
        System.out.println("Searching in Page Table...");

        int out = 0;
        for(int i=0; i<pageTable.length; i++){
            if(pageTable[pageNumber][0] != pageNumber){
                System.out.println("Page Table Miss! \n");  
                System.out.println("Error! No results found");;
                break;
            }
            else{
                int physicalAddressIndex = pageTable[pageNumber][1];
                System.out.println("Page Table Hit! \n");
                out = physicalAddressIndex;
                updateTLB(pageNumber, out);
                break;
            } 
        }
        return  out;
    }
}

